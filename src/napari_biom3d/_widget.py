"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
from typing import TYPE_CHECKING

from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget
from qtpy.QtWidgets import QHBoxLayout, QPushButton, QWidget


if TYPE_CHECKING:
    import napari

from sys import platform
from pathlib import Path
from magicgui import magicgui
import napari
from napari import Viewer
from napari.layers import Image
import numpy as np
import pathlib


#--------------------------------------------- biom3d Libs ----------------------------------------#


try:
    import biom3d
    from biom3d.preprocess import auto_config_preprocess
    from biom3d.utils import adaptive_load_config # might remove this
    from biom3d.utils import save_python_config # might remove this
    from biom3d.utils import nested_dict_change_value
    from biom3d.train import train
    from biom3d.pred import pred  
except:
    print("couldn't import biom3d's libs")
    pass


try:
    import biom3d.omero_pred 
    import biom3d.omero_uploader
except:
    print("couldn't import omero related modules")
    pass




# -------------------------------------- Auto configuration -------------------------------------------#


@magicgui(call_button="Auto-configure",
            directory1={"mode": "d", "label": "Select the folder containing the images :"},
            directory2={"mode": "d", "label": "Select the folder containing the masks :"},
            directory3={"mode": "r", "label": "Select the Config file :", "visible": False,},)
def autoconfigure(Use_Configuration_file :bool,
                  directory1: pathlib.Path,
                    directory2: pathlib.Path,
                    directory3:pathlib.Path,
                    Builder_name="Name for your Builder",
                    
                    Number_classes=1,
                    
                    ):
    autoconfigure.directory3.visible = Use_Configuration_file

   
    
    local_config_dir = "configs"
    local_logs_dir = "logs"
    
    if Use_Configuration_file : 
        config_path = str(directory3)
    else :
        config_path=auto_config_preprocess(img_dir=str(directory1),
            msk_dir=str(directory2),
            desc=Builder_name,
            num_classes=Number_classes,
            remove_bg=False, use_tif=False,
            config_dir=local_config_dir,
            logs_dir=local_logs_dir,
            base_config=None,               
            )
        
    return config_path
      
        
# ---------------------------------------- Training --------------------------------------------#
  
@magicgui(call_button="Train")        
def training(config_path=None,
             Epochs=10,
             Batch_size=8,
            Patch_size_x=18,
            Patch_size_y=18,
            Patch_size_z=18,
            Augmentation_Patch_size_x=16,
            Augmentation_Patch_size_y=16,
            Augmentation_Patch_size_z=16,
            Number_of_pool_x=57,
            Number_of_pool_y=57,
            Number_of_pool_z=5,):    
    
    local_config_dir = "configs"
    # Read the config file    
    cfg = adaptive_load_config(config_path)
    
    #cfg.DESC = Builder_name
    #cfg.NUM_CLASSES = Number_classes
    #cfg = nested_dict_change_value(cfg, 'num_classes', cfg.NUM_CLASSES)
    
    cfg.NB_EPOCHS = Epochs
    cfg = nested_dict_change_value(cfg, 'nb_epochs', cfg.NB_EPOCHS)
    
    cfg.BATCH_SIZE = Batch_size
    cfg = nested_dict_change_value(cfg, 'batch_size', cfg.BATCH_SIZE)
    
    Patch_size = [int(Patch_size_x),int(Patch_size_y),int(Patch_size_z)]
    cfg.PATCH_SIZE = Patch_size
    cfg = nested_dict_change_value(cfg, 'patch_size', cfg.PATCH_SIZE)
    
    Aug_patch_size = [int(Augmentation_Patch_size_x),int(Augmentation_Patch_size_y),int(Augmentation_Patch_size_z)]
    cfg.AUG_PATCH_SIZE = Aug_patch_size
    cfg = nested_dict_change_value(cfg, 'aug_patch_size', cfg.AUG_PATCH_SIZE)

    Number_of_pools = [int(Number_of_pool_x), int(Number_of_pool_y), int(Number_of_pool_z)]
    cfg.NUM_POOLS = Number_of_pools
    cfg = nested_dict_change_value(cfg, 'num_pools', cfg.NUM_POOLS)
    if platform=='win32':
            if not cfg.IMG_DIR == None : cfg.IMG_DIR = cfg.IMG_DIR.replace('\\','\\\\')
            if not cfg.MSK_DIR == None : cfg.MSK_DIR = cfg.MSK_DIR.replace('\\','\\\\')
            if not cfg.FG_DIR == None : cfg.FG_DIR = cfg.FG_DIR.replace('\\','\\\\')
            if not cfg.CSV_DIR  == None : cfg.CSV_DIR = cfg.CSV_DIR.replace('\\','\\\\')    
    # Save the new config file
    new_config_path = save_python_config(
    config_dir=local_config_dir,
    base_config=config_path,
    IMG_DIR=cfg.IMG_DIR,
    MSK_DIR=cfg.MSK_DIR,
    NUM_CLASSES=1,
    BATCH_SIZE=cfg.BATCH_SIZE,
    AUG_PATCH_SIZE=cfg.AUG_PATCH_SIZE,
    PATCH_SIZE=cfg.PATCH_SIZE,
    NUM_POOLS=cfg.NUM_POOLS,
    NB_EPOCHS=cfg.NB_EPOCHS
    
    )
    # Run the training           
    train(config=new_config_path)     
        
    return new_config_path



# ------------------------------------ Callback autoconfigure x training ------------------------------#

def autoconfigure_callback(config_path):
    # Read the configuration file
    cfg = adaptive_load_config(config_path)

    # Update the training parameters based on the configuration file
    training.config_path.value = config_path
    #training.Epochs.value = cfg.NB_EPOCHS
    training.Batch_size.value = cfg['BATCH_SIZE']
     # Extracting x, y, z values from PATCH_SIZE and assigning them
    patch_size = cfg.get('PATCH_SIZE', [18, 18, 18])  # Default to [18, 18, 18] if not found
    training.Patch_size_x.value = patch_size[0]
    training.Patch_size_y.value = patch_size[1]
    training.Patch_size_z.value = patch_size[2]

    # Similarly for other parameters
    aug_patch_size = cfg.get('AUG_PATCH_SIZE', [16, 16, 16])
    training.Augmentation_Patch_size_x.value = aug_patch_size[0]
    training.Augmentation_Patch_size_y.value = aug_patch_size[1]
    training.Augmentation_Patch_size_z.value = aug_patch_size[2]

    num_pools = cfg.get('NUM_POOLS', [57, 57, 5])
    training.Number_of_pool_x.value = num_pools[0]
    training.Number_of_pool_y.value = num_pools[1]
    training.Number_of_pool_z.value = num_pools[2]

def on_use_load_config( widget, value, directory1, directory2, directory3):
    directory1.visible = not value
    directory2.visible = not value
    directory3.visible =  value
 
# ------------------------------------------ Predicition -----------------------------------------#



@magicgui(call_button="Predict",
          omero_username={"widget_type": "LineEdit", "visible": False, "label": "Omero Username :"},
          omero_password={"widget_type": "Password", "visible": False, "label": "Password :"},
          omero_hostname={"widget_type": "LineEdit", "visible": False, "label": "Hostname :"},
          omero_dataset={"widget_type": "LineEdit", "visible": False, "label": "Input Dataset ID :"},
          omero_project_id={"widget_type": "LineEdit", "visible": False, "label": "Output Project ID :"},
          omero_dataset_name={"widget_type": "LineEdit", "visible": False, "label": "Enter a name for your output dataset :"},
          directory1={"mode": "d", "label": "Select the folder containing the images to predict :"},
          directory2={"mode": "d", "label": "Select the folder containing your model :"},
          directory3={"mode": "d", "label": "Select the output directory for predictions :"},
          )    
def predict(Use_Omero :bool,
            directory1 : pathlib.Path,
            directory2 : pathlib.Path,
            directory3 : pathlib.Path,
            omero_username: str ="",
            omero_password : str="",
            omero_hostname : str ="",
            omero_dataset : int = 0,
            omero_project_id : int = 0,
            omero_dataset_name : str = ""):
    
    predict.omero_username.visible = Use_Omero
    predict.omero_password.visible = Use_Omero
    predict.omero_hostname.visible = Use_Omero
    predict.omero_dataset.visible = Use_Omero
    predict.omero_project_id.visible = Use_Omero
    predict.omero_dataset_name.visible = Use_Omero
    predict.directory3.visible = not Use_Omero
    
    # OMERO ?
    if Use_Omero :
       
        # Use OMERO
        p = biom3d.omero_pred.run(
            obj="Dataset:"+omero_dataset,
            target="to_pred",
            log=str(directory2), 
            dir_out=str(directory3),
            user=omero_username,
            pwd=omero_password,
            host=omero_hostname
            )  
        
        # Send predictions to Omero
        biom3d.omero_uploader.run(username=omero_username,
                    password=omero_password,
                    hostname=omero_hostname,
                    project=int(omero_project_id),
                    dataset_name=omero_dataset_name,
                    path=str(p))
    else :  
        # Run prediction from local
        p = pred(dir_in=str(directory1),
            log=str(directory2),
            dir_out=str(directory3))
       
    return p

# ------------------------------------ Callback  Prediction  -------------------------------------#

def on_use_omero_change(widget, value,omero_username,omero_password,omero_hostname, omero_dataset,omero_project_id, omero_dataset_name ,directory1):
    directory1.visible = not value
 
    omero_username.visible = value
    omero_password.visible  = value
    omero_hostname.visible  = value
    omero_dataset.visible  = value
    omero_project_id.visible  = value
    omero_dataset_name.visible  = value
    
################################# --------- WIDGETS CLASSES --------- #################################
class Train(QWidget):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer
   
        self.setLayout(QHBoxLayout())
        autoconfigure.Use_Configuration_file.changed.connect(lambda value: on_use_load_config(autoconfigure, value,autoconfigure.directory1, autoconfigure.directory2, autoconfigure.directory3 ))
        # Connect the autoconfigure callback
        autoconfigure.call_button.changed.connect(lambda: autoconfigure_callback(autoconfigure()))

        viewer.window.add_dock_widget(autoconfigure)
        viewer.window.add_dock_widget(training)
        

class Prediction(QWidget):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer
        
        self.setLayout(QHBoxLayout())
        
        predict.Use_Omero.changed.connect(lambda value: on_use_omero_change(predict, value, predict.omero_username, predict.omero_password, predict.omero_hostname, predict.omero_dataset,predict.omero_project_id, predict.omero_dataset_name, predict.directory1))

        viewer.window.add_dock_widget(predict)
     
    
    